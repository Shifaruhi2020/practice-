class Solution {
    public boolean isValid(String s) {
       
        if(s.length()%2!=0) //checking if the string is even or not 
            return false;
        Stack <Character> stack=new Stack<>(); // creating stack
        for(char c:s.toCharArray()){
if(c=='(' || c=='{' || c=='[')
{    //opening brackets are pushed into the stack
    stack.push(c);
}
   ///closing brackets are pushed out of the stack 
   //if found closing bracket then check if the stack is empty or not and find the opening bracket in the non empty stack
                 
                 else if(c== ')' && !stack.isEmpty() && stack.peek()== '(' )
        
        { 
            stack.pop();
        }
         else if(c== '}'  && !stack.isEmpty() && stack.peek() =='{')
          {
             stack.pop();
         }
         else if(c== ']' && !stack.isEmpty() && stack.peek() =='[')
            { 
             stack.pop();
         }
             
                
            else{
             return false;}
               
            }

        return stack.isEmpty();
    }
}
